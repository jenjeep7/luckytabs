{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport type { ConsentSettings, ConsentStatusString } from 'firebase/analytics';\nimport {\n  getAnalytics,\n  logEvent,\n  setAnalyticsCollectionEnabled,\n  setConsent,\n  setUserId,\n  setUserProperties,\n} from 'firebase/analytics';\n\nimport type {\n  FirebaseAnalyticsPlugin,\n  GetAppInstanceIdResult,\n  InitiateOnDeviceConversionMeasurementWithEmailAddressOptions,\n  InitiateOnDeviceConversionMeasurementWithPhoneNumberOptions,\n  InitiateOnDeviceConversionMeasurementWithHashedEmailAddressOptions,\n  InitiateOnDeviceConversionMeasurementWithHashedPhoneNumberOptions,\n  IsEnabledResult,\n  LogEventOptions,\n  SetConsentOptions,\n  SetCurrentScreenOptions,\n  SetEnabledOptions,\n  SetSessionTimeoutDurationOptions,\n  SetUserIdOptions,\n  SetUserPropertyOptions,\n} from './definitions';\nimport { ConsentStatus, ConsentType } from './definitions';\n\nexport class FirebaseAnalyticsWeb\n  extends WebPlugin\n  implements FirebaseAnalyticsPlugin\n{\n  public async getAppInstanceId(): Promise<GetAppInstanceIdResult> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  public async setConsent(options: SetConsentOptions): Promise<void> {\n    const status: ConsentStatusString =\n      options.status === ConsentStatus.Granted ? 'granted' : 'denied';\n    const consentSettings: ConsentSettings = {};\n    switch (options.type) {\n      case ConsentType.AdPersonalization:\n        consentSettings.ad_personalization = status;\n        break;\n      case ConsentType.AdStorage:\n        consentSettings.ad_storage = status;\n        break;\n      case ConsentType.AdUserData:\n        consentSettings.ad_user_data = status;\n        break;\n      case ConsentType.AnalyticsStorage:\n        consentSettings.analytics_storage = status;\n        break;\n      case ConsentType.FunctionalityStorage:\n        consentSettings.functionality_storage = status;\n        break;\n      case ConsentType.PersonalizationStorage:\n        consentSettings.personalization_storage = status;\n        break;\n    }\n    setConsent(consentSettings);\n  }\n\n  public async setUserId(options: SetUserIdOptions): Promise<void> {\n    const analytics = getAnalytics();\n    setUserId(analytics, options.userId);\n  }\n\n  public async setUserProperty(options: SetUserPropertyOptions): Promise<void> {\n    const analytics = getAnalytics();\n    setUserProperties(analytics, {\n      [options.key]: options.value,\n    });\n  }\n\n  public async setCurrentScreen(\n    options: SetCurrentScreenOptions,\n  ): Promise<void> {\n    const analytics = getAnalytics();\n    logEvent(analytics, 'screen_view', {\n      firebase_screen: options.screenName || undefined,\n      firebase_screen_class: options.screenClassOverride || undefined,\n    });\n  }\n\n  public async logEvent(options: LogEventOptions): Promise<void> {\n    const analytics = getAnalytics();\n    logEvent(analytics, options.name, options.params);\n  }\n\n  public async setSessionTimeoutDuration(\n    _options: SetSessionTimeoutDurationOptions,\n  ): Promise<void> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  public async setEnabled(_options: SetEnabledOptions): Promise<void> {\n    const analytics = getAnalytics();\n    setAnalyticsCollectionEnabled(analytics, _options.enabled);\n  }\n\n  public async isEnabled(): Promise<IsEnabledResult> {\n    const enabled = (window as any)['ga-disable-analyticsId'] === true;\n    return {\n      enabled,\n    };\n  }\n\n  public async resetAnalyticsData(): Promise<void> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  public async initiateOnDeviceConversionMeasurementWithEmailAddress(\n    _options: InitiateOnDeviceConversionMeasurementWithEmailAddressOptions,\n  ): Promise<void> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  public async initiateOnDeviceConversionMeasurementWithPhoneNumber(\n    _options: InitiateOnDeviceConversionMeasurementWithPhoneNumberOptions,\n  ): Promise<void> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  public async initiateOnDeviceConversionMeasurementWithHashedEmailAddress(\n    _options: InitiateOnDeviceConversionMeasurementWithHashedEmailAddressOptions,\n  ): Promise<void> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  public async initiateOnDeviceConversionMeasurementWithHashedPhoneNumber(\n    _options: InitiateOnDeviceConversionMeasurementWithHashedPhoneNumberOptions,\n  ): Promise<void> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n}\n"]}