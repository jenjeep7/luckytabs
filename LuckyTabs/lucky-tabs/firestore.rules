rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow other authenticated users to read basic profile info (for search/friends)
      allow read: if request.auth != null;
      // Allow users to create their own profile
      allow create: if request.auth != null && request.auth.uid == userId;
      // Allow group-related updates (joining/leaving groups, friend management)
      allow update: if request.auth != null && 
        (request.resource.data.keys().hasOnly(['groups', 'updatedAt']) ||
         request.resource.data.keys().hasOnly(['friends', 'updatedAt']));
    }

    // Box rules - Testing mode: all authenticated users can do everything
    match /boxes/{boxId} {
      allow read, write: if request.auth != null;
    }

    // Locations - Testing mode: all authenticated users can do everything
    match /locations/{locationId} {
      allow read, write: if request.auth != null;
    }
    
    // NEW: Users can read and write their own budget documents
    match /budgets/{document} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // NEW: Users can read and write their own transaction documents
    match /transactions/{document} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Community posts - authenticated users can read all posts and create their own
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.resource.data.authorId == request.auth.uid;
      allow update: if request.auth != null && 
        (resource.data.authorId == request.auth.uid || 
         request.resource.data.keys().hasOnly(['likes']) ||
         request.resource.data.keys().hasOnly(['likes', 'timestamp', 'authorId', 'content', 'type']));
      allow delete: if request.auth != null && 
        resource.data.authorId == request.auth.uid;
    }
    
    // Community comments - authenticated users can read all comments and create their own
    match /comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.resource.data.authorId == request.auth.uid;
      allow update: if request.auth != null && 
        resource.data.authorId == request.auth.uid;
      allow delete: if request.auth != null && 
        resource.data.authorId == request.auth.uid;
    }
    
    // Groups - authenticated users can create groups and manage groups they belong to
    match /groups/{groupId} {
      allow read: if request.auth != null && 
        (resource == null || request.auth.uid in resource.data.members);
      allow create: if request.auth != null && 
        request.resource.data.createdBy == request.auth.uid &&
        request.auth.uid in request.resource.data.members;
      allow update: if request.auth != null && 
        (resource.data.createdBy == request.auth.uid || 
         request.auth.uid in resource.data.members);
      allow delete: if request.auth != null && 
        resource.data.createdBy == request.auth.uid;
    }
  }
}
