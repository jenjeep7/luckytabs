rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Box rules - maintain your existing logic but with better security
    match /boxes/{boxId} {
      allow create, update: if request.auth != null
        && request.resource.data.locationId is string
        && (request.resource.data.type == 'wall' || request.resource.data.type == 'bar box')
        && request.resource.data.addedBy == request.auth.uid;
      allow read: if true; // Keep public read access for your game mechanics
      allow delete: if request.auth != null && resource.data.addedBy == request.auth.uid;
    }

    // Locations - restrict to user's own locations for better security
    match /locations/{locationId} {
      allow read: if true; // Keep public read for shared locations
      allow write: if request.auth != null && 
        (resource == null || resource.data.addedBy == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.addedBy == request.auth.uid;
    }
    
    // NEW: Users can read and write their own budget documents
    match /budgets/{document} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // NEW: Users can read and write their own transaction documents
    match /transactions/{document} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
  }
}
